/*  Student information for assignment:
 *
 *  Number of slip days used:
 *
 *  Student 1 (Student whose turnin account is being used)
 *  UTEID:
 *  email address:
 *  Grader name:
 *  Section number:
 *  
 *  Student 2 
 *  UTEID:
 *  email address:
 *  Grader name:
 *  Section number:
 *  
 */


/*
CS 314 Students. Put your answers to the questions from the
RecursiveTrace class here.

// What is the output when a(5) called?

	5 performing recursive step
	4 performing recursive step
	3 performing recursive step
	2 performing recursive step
	1 performing recursive step
	0 at base case.
	
// What is the Big O of this method?

	O(N) - at worst case, when N > 0
	O(1) - at best case, when N <= 0
	
// What would occur if the method call a(-5) is made?

	The method will print the string, "-5 at base case.".
	
// What is the output when b(7) called.

	7 performing recursive step
	5 performing recursive step
	3 performing recursive step
	1 performing recursive step
	-1 at base case.
	1 done with recursive step
	3 done with recursive step
	5 done with recursive step
	7 done with recursive step
	
// What is the output when c(7) called.

	0
	0
	0
	0
	0
	0
	0
	0 at base case.
	5
	8
	11
	14
	17
	20
	23
	
// What does d(16) return?

	9
	
// What is the Big O of this method?

	O(N) - T(N) = 1/3 * N
	
// What does e(4) return?

	77
	
// What is the Big O of this method?

	O(N^2)
	
// Use the stopwatch class to record the time it takes for
// this method to complete as n goes from 1 to 30.

	0 e of i 2 time: elapsed time: 3.646E-6 seconds.
	1 e of i 7 time: elapsed time: 1.208E-6 seconds.
	2 e of i 17 time: elapsed time: 1.834E-6 seconds.
	3 e of i 37 time: elapsed time: 2.932E-6 seconds.
	4 e of i 77 time: elapsed time: 5.254E-6 seconds.
	5 e of i 157 time: elapsed time: 9.842E-6 seconds.
	6 e of i 317 time: elapsed time: 2.0352E-5 seconds.
	7 e of i 637 time: elapsed time: 4.025E-5 seconds.
	8 e of i 1277 time: elapsed time: 7.9086E-5 seconds.
	9 e of i 2557 time: elapsed time: 1.56463E-4 seconds.
	10 e of i 5117 time: elapsed time: 3.19116E-4 seconds.
	11 e of i 10237 time: elapsed time: 6.45666E-4 seconds.
	12 e of i 20477 time: elapsed time: 0.001310604 seconds.
	13 e of i 40957 time: elapsed time: 0.002580432 seconds.
	14 e of i 81917 time: elapsed time: 0.002558828 seconds.
	15 e of i 163837 time: elapsed time: 1.85936E-4 seconds.
	16 e of i 327677 time: elapsed time: 5.03555E-4 seconds.
	17 e of i 655357 time: elapsed time: 7.40167E-4 seconds.
	18 e of i 1310717 time: elapsed time: 0.001950813 seconds.
	19 e of i 2621437 time: elapsed time: 0.002977796 seconds.
	20 e of i 5242877 time: elapsed time: 0.005892001 seconds.
	21 e of i 10485757 time: elapsed time: 0.004888951 seconds.
	22 e of i 20971517 time: elapsed time: 0.012929538 seconds.
	23 e of i 41943037 time: elapsed time: 0.019543341 seconds.
	24 e of i 83886077 time: elapsed time: 0.050866156 seconds.
	25 e of i 167772157 time: elapsed time: 0.078311704 seconds.
	26 e of i 335544317 time: elapsed time: 0.202032368 seconds.
	27 e of i 671088637 time: elapsed time: 0.312375242 seconds.
	28 e of i 1342177277 time: elapsed time: 0.807508664 seconds.
	29 e of i -1610612739 time: elapsed time: 1.246089066 seconds.
	30 e of i 1073741821 time: elapsed time: 3.229765854 seconds.
	
// Based on your answer what is the expected time to complete
// when n = 40?

	3200 Seconds

 */

import java.util.ArrayList;
import java.util.Collections;

public class RecursiveTester {
    public static void main(String[] args) {
        Recursive r = new Recursive();

        String actualBinary = r.getBinary(13);
        String expectedBinary = "1101";
        if( actualBinary.equals(expectedBinary) )
            System.out.println( "Test 1 passed. get binary.");
        else
            System.out.println( "Test 1 failed. get binary. expected: " + expectedBinary + ", actual: " + actualBinary);

        
        actualBinary = r.getBinary(0);
        expectedBinary = "0";
        if( actualBinary.equals(expectedBinary) )
            System.out.println( "Test 1.1 passed. get binary.");
        else
            System.out.println( "Test 1.1 failed. get binary. expected: " + expectedBinary + ", actual: " + actualBinary);
        
        actualBinary = r.getBinary(1);
        expectedBinary = "1";
        if( actualBinary.equals(expectedBinary) )
            System.out.println( "Test 1.2 passed. get binary.");
        else
            System.out.println( "Test 1.2 failed. get binary. expected: " + expectedBinary + ", actual: " + actualBinary);
        
        
        actualBinary = r.getBinary(64);
        expectedBinary = "1000000";
        if( actualBinary.equals(expectedBinary) )
            System.out.println( "Test 2 passed. get binary");
        else
            System.out.println( "Test 2 failed. get binary. expected: " + expectedBinary + ", actual: " + actualBinary);

        
        String actualRev = r.revString("target");
        String expectedRev = "tegrat";
        if( actualRev.equals(expectedRev) )
            System.out.println( "Test 3 passed. reverse string.");
        else
            System.out.println( "Test 3 failed. reverse string. expected: " + expectedRev + ", actual: " + actualRev);

        
        actualRev = r.revString("Calvin and Hobbes");
        expectedRev = "sebboH dna nivlaC";
        if( actualRev.equals(expectedRev) )
            System.out.println( "Test 4 passed. reverse string.");
        else
            System.out.println( "Test 4 failed. reverse string. expected: " + expectedRev + ", actual: " + actualRev);
        
        
        int[] numsForDouble = {1, 2, 4, 8, 16, 32, 64, 128, 256};
        int actualDouble = r.nextIsDouble(numsForDouble);
        int expectedDouble = 8;
        if(actualDouble == expectedDouble)
            System.out.println( "Test 5 passed. next is double.");
        else
            System.out.println( "Test 5 failed. next is double. expected: " + expectedDouble + ", actual: " + actualDouble);     
        
        
        numsForDouble = new int[]{1, 3, 4, 2, 32, 8, 128, -5, 6};
        actualDouble = r.nextIsDouble(numsForDouble);
        expectedDouble = 0;
        if(actualDouble == expectedDouble)
            System.out.println( "Test 6 passed. next is double.");
        else
            System.out.println( "Test 6 failed. next is double. expected: " + expectedDouble + ", actual: " + actualDouble); 

        
        numsForDouble = new int[]{1, 0, 0, -5, -10, 32, 64, 128, 2, 9, 18};
        actualDouble = r.nextIsDouble(numsForDouble);
        expectedDouble = 5;
        if(actualDouble == expectedDouble)
            System.out.println( "Test 7 passed. next is double.");
        else
            System.out.println( "Test 7 failed. next is double. expected: " + expectedDouble + ", actual: " + actualDouble); 
        
        
        ArrayList<String> mnemonics = r.listMnemonics("1");
        ArrayList<String> expected = new ArrayList<String>();
        expected.add("1");
        if( mnemonics.equals(expected))
            System.out.println( "Test 8 passed. Phone mnemonics.");
        else
            System.out.println( "Test 8 failed. Phone mnemonics.");

        mnemonics = r.listMnemonics("22");
        Collections.sort(mnemonics);
        expected.clear();
        expected.add("AA");
        expected.add("AB");
        expected.add("AC");
        expected.add("BA");
        expected.add("BB");
        expected.add("BC");
        expected.add("CA");
        expected.add("CB");
        expected.add("CC");
        Collections.sort(expected);
        if( mnemonics.equals(expected))
            System.out.println( "Test 9 passed. Phone mnemonics.");
        else
            System.out.println( "Test 9 failed. Phone mnemonics.");

        mnemonics = r.listMnemonics("110010");
        expected.clear();
        expected.add("110010");
        if( mnemonics.equals(expected))
            System.out.println( "Test 10 passed. Phone mnemonics.");
        else
            System.out.println( "Test 10 failed. Phone mnemonics.");		



        int[][] world = {{5,5,5,5,5,5},
                {5,5,5,5,5,5},
                {5,5,5,5,5,5},
                {5,5,4,4,5,5},
                {5,5,3,3,5,5},
                {5,5,2,2,5,5},
                {5,5,5,1,5,5},
                {5,5,5,-2,5,5}};

        if( r.canFlowOffMap(world,0,0))
            System.out.println( "Test 11 passed. can flow off map.");
        else
            System.out.println( "Test 11 failed. can flow off map.");

        if( !r.canFlowOffMap(world,1,1))
            System.out.println( "Test 12 passed. can flow off map.");
        else
            System.out.println( "Test 12 failed. can flow off map.");	

        if( r.canFlowOffMap(world,3,3))
            System.out.println( "Test 13 passed. can flow off map.");
        else
            System.out.println( "Test 13 failed. can flow off map.");

        if( r.canFlowOffMap(world,1,5))
            System.out.println( "Test 14 passed. can flow off map.");
        else
            System.out.println( "Test 14 failed. can flow off map.");

        world = new int[][]
                          {{10, 10, 10, 10, 10, 10, 10},
                {10, 10, 10,  5, 10, 10, 10},
                {10, 10, 10,  6, 10, 10, 10},
                {10, 10, 10,  7, 10, 10, 10},
                {5,   6,  7,  8,  7,  6, 10},
                {10, 10, 10,  7, 10, 10, 10},
                {10, 10, 10,  6, 10, 10, 10},
                {10, 10, 10,  5, 10, 10, 10},
                {10, 10, 10, 10, 10, 10, 10},
                          };

        if( !r.canFlowOffMap(world,3,3))
            System.out.println( "Test 15 passed. can flow off map.");
        else
            System.out.println( "Test 15 failed. can flow off map.");	

        if( r.canFlowOffMap(world,4,3))
            System.out.println( "Test 16 passed. can flow off map.");
        else
            System.out.println( "Test 16 failed. can flow off map.");


        int[] abilities = {1, 2, 3, 4, 5, 6, 7};
        if(r.minDifference(3, abilities) == 1)
            System.out.println( "Test 17 passed. min difference.");
        else
            System.out.println( "Test 17 failed. min difference.");	

        if(r.minDifference(5, abilities) == 2)
            System.out.println( "Test 18 passed. min difference.");
        else
            System.out.println( "Test 18 failed. min difference.");

        if(r.minDifference(6, abilities) == 4)
            System.out.println( "Test 19 passed. min difference.");
        else
            System.out.println( "Test 19 failed. min difference.");		

        abilities = new int[]{1, 12, 46, 60, 53, 86, 72, 79, 44, 7};
        if(r.minDifference(3, abilities) == 3)
            System.out.println( "Test 20 passed. min difference.");
        else
            System.out.println( "Test 20 failed. min difference.");

        if(r.minDifference(5, abilities) == 19)
            System.out.println( "Test 20 passed. min difference.");
        else
            System.out.println( "Test 20 failed. min difference.");
        
        
        abilities = new int[]{10, 10, 6, 6, 6};
        if(r.minDifference(2, abilities) == 2)
            System.out.println( "Test 21 passed. min difference.");
        else
            System.out.println( "Test 21 failed. min difference.");
        
        
        String puzzle1 = "530070000600195000098000060800060003400803001700020006060000280000419005000080079";
        int[][] board = stringToBoard(puzzle1);
        int[][] result = r.getSudokoSolution(board);
        String actualBoard = boardToString(result);
        String expectedBoard = "534678912672195348198342567859761423426853791713924856961537284287419635345286179";
        if(actualBoard.equals(expectedBoard))
            System.out.println( "Test 22 passed. sudoko solver.");
        else {
            System.out.println("Test 22 failed. sudoku solver:");
            System.out.println("Expected board:");
            printBoard(stringToBoard(expectedBoard));
            System.out.println();
            System.out.println("Actual board:");
            printBoard(result);
        }
        
        
        String puzzle2 = "370002060000000050008073900147000000009301200000000891005120600010000000080600043";
        board = stringToBoard(puzzle2);
        result = r.getSudokoSolution(board);
        actualBoard = boardToString(result);
        expectedBoard = "371592468294816357568473912147289536859361274623745891735124689416938725982657143";
        if(actualBoard.equals(expectedBoard))
            System.out.println( "Test 23 passed. sudoko solver.");
        else {
            System.out.println("Test 23 failed. sudoku solver:");
            System.out.println("Expected board:");
            printBoard(stringToBoard(expectedBoard));
            System.out.println();
            System.out.println("Actual board:");
            printBoard(result);
        }
        
        
        String puzzle3 = "000010300008003500500002001003000007106070403400000200200300004004900600007080000";
        assert puzzle3.length() == 81;
        board = stringToBoard(puzzle3);
        result = r.getSudokoSolution(board);
        actualBoard = boardToString(result);
        expectedBoard = "642715389718493526539862741823546917196278453475139268261357894384921675957684132";
        if(actualBoard.equals(expectedBoard))
            System.out.println( "Test 24 passed. sudoko solver.");
        else {
            System.out.println("Test 24 failed. sudoku solver:");
            System.out.println("Expected board:");
            printBoard(stringToBoard(expectedBoard));
            System.out.println();
            System.out.println("Actual board:");
            printBoard(result);
        }
        
        
        String puzzle4 = "080700500700008021000002009800100206690824015105009008500400000430200007009007080";
        assert puzzle4.length() == 81;
        board = stringToBoard(puzzle4);
        result = r.getSudokoSolution(board);
        actualBoard = boardToString(result);
        expectedBoard = "982716534754938621361542879843175296697824315125369748578493162436281957219657483";
        if(actualBoard.equals(expectedBoard))
            System.out.println( "Test 25 passed. sudoko solver.");
        else {
            System.out.println("Test 25 failed. sudoku solver:");
            System.out.println("Expected board:");
            printBoard(stringToBoard(expectedBoard));
            System.out.println();
            System.out.println("Actual board:");
            printBoard(result);
        }
        
        
        String puzzle5 = "000050400080102350400307086050000670100809002038000040590203004047906020003070000";
        assert puzzle5.length() == 81;
        board = stringToBoard(puzzle5);
        result = r.getSudokoSolution(board);
        actualBoard = boardToString(result);
        expectedBoard = "000050400080102350400307086050000670100809002038000040590203004047906020003070000";
        if(actualBoard.equals(expectedBoard))
            System.out.println( "Test 26 passed. sudoko solver.");
        else {
            System.out.println("Test 26 failed. sudoku solver:");
            System.out.println("Expected board:");
            printBoard(stringToBoard(expectedBoard));
            System.out.println();
            System.out.println("Actual board:");
            printBoard(result);
        }
        
        //        // try the Sierpinski triangle, uncomment when ready
        //        r.drawTriangles(400, 100, 360);
        //        
        //        // try the Sierpinski Carpet, uncomment when ready
        //        r.drawCarpet(729, 4);
        
        // also try this
        //      r.drawCarpet(729, 1);
        
        studentTests(r);

    }
    
    // pre: r != null
    // post: run student test       
    private static void studentTests(Recursive r) {
        // CS314 students put your tests here
        
    }

    private static String boardToString(int[][] board) {
        StringBuilder result = new StringBuilder(81);
        for(int r = 0; r < board.length; r++)
            for(int c = 0; c < board[r].length; c++)
                result.append(board[r][c]);
        return result.toString();
    }

    private static int[][] stringToBoard(String puzzle) {
        int[][] result = new int[Recursive.BOARD_SIZE][Recursive.BOARD_SIZE];
        int index = 0;
        for(int r = 0; r < result.length; r++)
            for(int c = 0; c < result.length; c++, index++)
                result[r][c] = puzzle.charAt(index) - '0';
        return result;
    }
    
    private static void printBoard(int[][] board) {
        for(int r = 0; r < board.length; r++) {
            for(int c = 0; c < board[r].length; c++) {
                System.out.print(board[r][c]);
                System.out.print(" ");
            }
            System.out.println();
        }
    }
}
